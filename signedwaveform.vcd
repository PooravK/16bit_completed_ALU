$date
	Thu Jul 31 17:13:53 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_signed_div $end
$var wire 16 ! final_remainder [15:0] $end
$var wire 16 " final_quotient [15:0] $end
$var reg 16 # dividend [15:0] $end
$var reg 16 $ divisor [15:0] $end
$scope module uut $end
$var wire 16 % dividend [15:0] $end
$var wire 16 & divisor [15:0] $end
$var wire 1 ' quotient_sign $end
$var wire 16 ( temp_remainder [15:0] $end
$var wire 16 ) temp_quotient [15:0] $end
$var wire 1 * remainder_sign $end
$var reg 16 + final_quotient [15:0] $end
$var reg 16 , final_remainder [15:0] $end
$var reg 16 - temp_dividend [15:0] $end
$var reg 16 . temp_divisor [15:0] $end
$scope module unsigneddivisionlogic $end
$var wire 16 / dividend [15:0] $end
$var wire 16 0 divisor [15:0] $end
$var reg 16 1 quotient [15:0] $end
$var reg 16 2 remainder [15:0] $end
$var integer 32 3 i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b10000 3
b0 2
b1010 1
b1010 0
b1100100 /
b1010 .
b1100100 -
b0 ,
b1010 +
0*
b1010 )
b0 (
0'
b1010 &
b1100100 %
b1010 $
b1100100 #
b1010 "
b0 !
$end
#10000
b1111111110011100 "
b1111111110011100 +
b1100100 )
b1100100 1
b10000 3
1'
b1111101000 -
b1111101000 /
1*
b1111110000011000 #
b1111110000011000 %
#20000
0*
b1111111111110110 $
b1111111111110110 &
b1111101000 #
b1111101000 %
#30000
b1100100 "
b1100100 +
0'
1*
b1111110000011000 #
b1111110000011000 %
#40000
b1111011 "
b1111011 +
b1111011 )
b1111011 1
b10000 3
b1111011 -
b1111011 /
b1 .
b1 0
0*
b1 $
b1 &
b1111011 #
b1111011 %
#50000
b1111111110000101 "
b1111111110000101 +
1'
b1111111111111111 $
b1111111111111111 &
#60000
b1 !
b1 ,
b11111111111111 "
b11111111111111 +
0'
b1 (
b1 2
b11111111111111 )
b11111111111111 1
b10000 3
b111111111111111 -
b111111111111111 /
b10 .
b10 0
b10 $
b10 &
b111111111111111 #
b111111111111111 %
#70000
b100000000000000 "
b100000000000000 +
b0 (
b0 2
b100000000000000 )
b100000000000000 1
b10000 3
b0 !
b0 ,
b1000000000000000 -
b1000000000000000 /
1*
b1111111111111110 $
b1111111111111110 &
b1000000000000000 #
b1000000000000000 %
#80000
b111111111111111 !
b111111111111111 ,
b0 "
b0 +
b111111111111111 (
b111111111111111 2
b0 )
b0 1
b10000 3
1'
b111111111111111 -
b111111111111111 /
b1000000000000000 .
b1000000000000000 0
0*
b1000000000000000 $
b1000000000000000 &
b111111111111111 #
b111111111111111 %
#90000
b0 !
b0 ,
b1 "
b1 +
0'
b0 (
b0 2
b1 )
b1 1
b10000 3
b10011010010 -
b10011010010 /
b10011010010 .
b10011010010 0
b10011010010 $
b10011010010 &
b10011010010 #
b10011010010 %
#100000
b10011010010 !
b10011010010 ,
b1111111111111111 "
b1111111111111111 +
b10011010010 (
b10011010010 2
b1111111111111111 )
b1111111111111111 1
b10000 3
b0 .
b0 0
b0 $
b0 &
#110000
b0 !
b0 ,
b0 "
b0 +
b0 (
b0 2
b0 )
b0 1
b10000 3
b0 -
b0 /
b10011010010 .
b10011010010 0
b10011010010 $
b10011010010 &
b0 #
b0 %
#120000
