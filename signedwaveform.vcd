$date
	Wed Jul 30 20:49:25 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_signed_mult $end
$var wire 32 ! final_signedprod [31:0] $end
$var reg 16 " in0 [15:0] $end
$var reg 16 # in1 [15:0] $end
$scope module uut $end
$var wire 16 $ in0 [15:0] $end
$var wire 16 % in1 [15:0] $end
$var wire 1 & sign_check $end
$var wire 32 ' temp_prod [31:0] $end
$var reg 32 ( final_signedprod [31:0] $end
$var reg 16 ) temp_in0 [15:0] $end
$var reg 16 * temp_in1 [15:0] $end
$scope module unsignedlogic $end
$var wire 16 + in0 [15:0] $end
$var wire 16 , in1 [15:0] $end
$var wire 16 - prod4 [15:0] $end
$var wire 16 . prod3 [15:0] $end
$var wire 16 / prod2 [15:0] $end
$var wire 16 0 prod1 [15:0] $end
$var wire 32 1 prod [31:0] $end
$scope module hxh $end
$var wire 8 2 in0 [7:0] $end
$var wire 8 3 in1 [7:0] $end
$var wire 16 4 prod [15:0] $end
$scope begin genblk1[0] $end
$var parameter 2 5 i $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 6 i $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 7 i $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 8 i $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 9 i $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 : i $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 ; i $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 < i $end
$upscope $end
$upscope $end
$scope module hxl $end
$var wire 8 = in0 [7:0] $end
$var wire 8 > in1 [7:0] $end
$var wire 16 ? prod [15:0] $end
$scope begin genblk1[0] $end
$var parameter 2 @ i $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 A i $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 B i $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 C i $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 D i $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 E i $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 F i $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 G i $end
$upscope $end
$upscope $end
$scope module lxh $end
$var wire 8 H in0 [7:0] $end
$var wire 8 I in1 [7:0] $end
$var wire 16 J prod [15:0] $end
$scope begin genblk1[0] $end
$var parameter 2 K i $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 L i $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 M i $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 N i $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 O i $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 P i $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 Q i $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 R i $end
$upscope $end
$upscope $end
$scope module lxl $end
$var wire 8 S in0 [7:0] $end
$var wire 8 T in1 [7:0] $end
$var wire 16 U prod [15:0] $end
$scope begin genblk1[0] $end
$var parameter 2 V i $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 W i $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 X i $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 Y i $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 Z i $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 [ i $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 \ i $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 ] i $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b111 ]
b110 \
b101 [
b100 Z
b11 Y
b10 X
b1 W
b0 V
b111 R
b110 Q
b101 P
b100 O
b11 N
b10 M
b1 L
b0 K
b111 G
b110 F
b101 E
b100 D
b11 C
b10 B
b1 A
b0 @
b111 <
b110 ;
b101 :
b100 9
b11 8
b10 7
b1 6
b0 5
$end
#0
$dumpvars
b0 U
b0 T
b0 S
b0 J
b0 I
b0 H
b0 ?
b0 >
b0 =
b0 4
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
0&
b0 %
b0 $
b0 #
b0 "
b0 !
$end
#10000
b11010010 S
b11010010 H
b100 =
b100 2
b10011010010 )
b10011010010 +
b10011010010 "
b10011010010 $
#20000
1&
b101110 T
b10110 I
b101110 >
b10110 3
b0 S
b0 H
b0 =
b0 2
b1011000101110 *
b1011000101110 ,
b0 )
b0 +
b1110100111010010 #
b1110100111010010 %
b0 "
b0 $
#30000
b1 !
b1 (
b1 '
b1 1
b1 0
b1 U
b1 T
b0 I
b1 >
b0 3
b1 S
b1 H
0&
b1 *
b1 ,
b1 )
b1 +
b1111111111111111 #
b1111111111111111 %
b1111111111111111 "
b1111111111111111 $
#40000
b110101101001001110100100000000 !
b110101101001001110100100000000 (
b1010111110000 /
b1010111110000 J
b110101101001001110100100000000 '
b110101101001001110100100000000 1
b100100000000 0
b100100000000 U
b1010111110000 .
b1010111110000 ?
b11010101111001 -
b11010101111001 4
b110000 T
b1110101 I
b110000 >
b1110101 3
b110000 S
b110000 H
b1110101 =
b1110101 2
b111010100110000 *
b111010100110000 ,
b111010100110000 )
b111010100110000 +
b111010100110000 #
b111010100110000 %
b111010100110000 "
b111010100110000 $
#50000
b10110001001100 0
b10110001001100 U
b0 /
b0 J
b10000010001001100 '
b10000010001001100 1
b11011000 .
b11011000 ?
b0 -
b0 4
b11111111111111101111101110110100 !
b11111111111111101111101110110100 (
b110110 T
b0 I
b110110 >
b0 3
b11010010 S
b11010010 H
b100 =
b100 2
1&
b110110 *
b110110 ,
b10011010010 )
b10011010010 +
b110110 #
b110110 %
b1111101100101110 "
b1111101100101110 $
#60000
b1000000000000000000000000000000 '
b1000000000000000000000000000000 1
b0 0
b0 U
b0 .
b0 ?
b100000000000000 -
b100000000000000 4
b1000000000000000000000000000000 !
b1000000000000000000000000000000 (
0&
b0 T
b10000000 I
b0 >
b10000000 3
b0 S
b0 H
b10000000 =
b10000000 2
b1000000000000000 *
b1000000000000000 ,
b1000000000000000 )
b1000000000000000 +
b1000000000000000 #
b1000000000000000 %
b1000000000000000 "
b1000000000000000 $
#70000
